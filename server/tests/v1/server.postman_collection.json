{
  "info": {
    "_postman_id": "681810b5-6b65-4559-b16c-522ac013c1ae",
    "name": "Test Case",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "38096650"
  },
  "item": [
    {
      "name": "Signup as User",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.variables.set(\"dynamicEmail\", `test${Math.floor(Math.random() * 1000)}@gmail.com`);",
              "pm.variables.set(\"dynamicUsername\", `testUser${Math.floor(Math.random() * 1000)}`);",
              "pm.variables.set(\"dynamicFirstName\", \"TestFirstName\");",
              "pm.variables.set(\"dynamicLastName\", \"TestLastName\");",
              "pm.variables.set(\"dynamicPassword\", \"testPassword123\");",
              "",
              "pm.variables.set(\"dynamicEmail\", `test${Math.floor(Math.random() * 1000)}@gmail.com`);",
              "pm.variables.set(\"dynamicUsername\", `testUser${Math.floor(Math.random() * 1000)}`);",
              "pm.variables.set(\"dynamicFirstName\", \"TestFirstName\");",
              "pm.variables.set(\"dynamicLastName\", \"TestLastName\");",
              "pm.variables.set(\"dynamicPassword\", \"testPassword123\");",
              "",
              "const roles = [\"user\", \"admin\"];",
              "pm.variables.set(\"role\", roles[0]);",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful POST request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
              "});",
              "",
              "pm.environment.set(\"userId\", pm.response.json().user._id); // Set ownerId from the response",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"emailAddress\": \"{{dynamicEmail}}\",\n    \"username\": \"{{dynamicUsername}}\",\n    \"password\": \"{{dynamicPassword}}\",\n    \"firstName\": \"{{dynamicFirstName}}\",\n    \"lastName\": \"{{dynamicLastName}}\",\n    \"role\": \"{{role}}\"\n}\n",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/auth/signup",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "auth", "signup"]
        }
      },
      "response": []
    },
    {
      "name": "Login",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful POST request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
              "});",
              "",
              "// Set the token in the environment",
              "const token = pm.response.json().token; // Access token from the response",
              "if (token) {",
              "    pm.environment.set(\"token\", token); // Store it in environment",
              "} else {",
              "    console.error(\"Token not found in the response\");",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [""],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"emailAddress\": \"{{dynamicEmail}}\",\n    \"password\": \"{{dynamicPassword}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/auth/login",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "auth", "login"]
        }
      },
      "response": []
    },
    {
      "name": "Post Debate",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Define dynamic topics and categories",
              "const topics = [",
              "  \"Climate Change Debate\",",
              "  \"Future of AI\",",
              "  \"Universal Basic Income\",",
              "  \"Impact of Social Media\",",
              "  \"Ethics of Genetic Engineering\"",
              "];",
              "const categories = [",
              "  \"Politics\",",
              "  \"Technology\",",
              "  \"Sports\",",
              "  \"Health\",",
              "  \"Education\",",
              "  \"Social Issues\",",
              "];",
              "",
              "// Pick a random topic and category",
              "const randomTopic = topics[Math.floor(Math.random() * topics.length)];",
              "const randomCategory = categories[Math.floor(Math.random() * categories.length)];",
              "",
              "// Set a dynamic endTime (one week from now)",
              "const endTime = new Date();",
              "endTime.setDate(endTime.getDate() + 7); // 7 days from now",
              "const formattedEndTime = endTime.toISOString(); // ISO string format for MongoDB",
              "",
              "",
              "// Set the maximum number of participants (between 2 and 4 to match the schema limit)",
              "const maxAllowedParticipants = 4;  // Maximum allowed by the schema",
              "const maxParticipants = Math.floor(Math.random() * (maxAllowedParticipants - 1)) + 2; // Random number between 2 and 4",
              "",
              "// Set these dynamic values as Postman variables",
              "pm.variables.set(\"topic\", randomTopic);",
              "pm.variables.set(\"category\", randomCategory);",
              "// Set these dynamic values as Postman variables",
              "pm.variables.set(\"endTime\", formattedEndTime);  // Correctly set the \"endTime\" variable",
              "pm.variables.set(\"maxParticipants\", maxParticipants);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.environment.set(\"debateId\", pm.response.json()._id);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"topic\": \"{{topic}}\", \n    \"category\": \"{{category}}\", \n    \"endTime\": \"2024-12-22T15:35:57.726+00:00\", \n    \"owner\": \"{{userId}}\", \n    \"maxParticipants\": {{maxParticipants}}\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", ""]
        }
      },
      "response": []
    },
    {
      "name": "Get All Debates",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "localhost:3001/api/v1/debates",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates"]
        }
      },
      "response": []
    },
    {
      "name": "Get Sorted Politics Debates",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "localhost:3001/api/v1/debates?category=Politics&sort=asc",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates"],
          "query": [
            {
              "key": "category",
              "value": "Politics"
            },
            {
              "key": "sort",
              "value": "asc"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get Open Debates",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "localhost:3001/api/v1/debates?status=open",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates"],
          "query": [
            {
              "key": "status",
              "value": "open"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get a Specific Debate",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [""],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", "{{debateId}}", ""]
        }
      },
      "response": []
    },
    {
      "name": "Post Argument",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.variables.set(\"dynamicContent\", `Argument Content Test #${Math.floor(Math.random() * 1000)}`);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "",
              "pm.environment.set(\"argumentId\", pm.response.json()._id);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"content\": \"{{dynamicContent}}\",\n    \"userId\": \"{{userId}}\",\n    \"side\": \"with\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}/arguments/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", "{{debateId}}", "arguments", ""]
        }
      },
      "response": []
    },
    {
      "name": "Post Comment",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "let counter = 0;",
              "",
              "counter++;",
              "",
              "pm.environment.set(\"dynamicCommentContent\", `Comment #${counter}`)"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "",
              "",
              "pm.environment.set(\"commentId\", pm.response.json()._id);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"content\": \"{{dynamicCommentContent}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}/arguments/{{argumentId}}/comments/",
          "host": ["localhost"],
          "port": "3001",
          "path": [
            "api",
            "v1",
            "debates",
            "{{debateId}}",
            "arguments",
            "{{argumentId}}",
            "comments",
            ""
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get All Arguments of Spec Debate",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}/arguments/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", "{{debateId}}", "arguments", ""]
        }
      },
      "response": []
    },
    {
      "name": "Edit Comment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"content\": \"Comment Edited\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}/arguments/{{argumentId}}/comments/{{commentId}}",
          "host": ["localhost"],
          "port": "3001",
          "path": [
            "api",
            "v1",
            "debates",
            "{{debateId}}",
            "arguments",
            "{{argumentId}}",
            "comments",
            "{{commentId}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Edit Argument",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"content\": \"Argument Topic Edited\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}/arguments/{{argumentId}}/",
          "host": ["localhost"],
          "port": "3001",
          "path": [
            "api",
            "v1",
            "debates",
            "{{debateId}}",
            "arguments",
            "{{argumentId}}",
            ""
          ]
        }
      },
      "response": []
    },
    {
      "name": "Replace Comment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"content\": \"Comment Edited\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}/arguments/{{argumentId}}/comments/{{commentId}}",
          "host": ["localhost"],
          "port": "3001",
          "path": [
            "api",
            "v1",
            "debates",
            "{{debateId}}",
            "arguments",
            "{{argumentId}}",
            "comments",
            "{{commentId}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Replace Argument",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [""],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"content\": \"Argument Topic Edited\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}/arguments/{{argumentId}}/",
          "host": ["localhost"],
          "port": "3001",
          "path": [
            "api",
            "v1",
            "debates",
            "{{debateId}}",
            "arguments",
            "{{argumentId}}",
            ""
          ]
        }
      },
      "response": []
    },
    {
      "name": "Replace Debate",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"topic\": \"Debate Topic Replaced\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", "{{debateId}}"]
        }
      },
      "response": []
    },
    {
      "name": "Delete Comment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [""],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}/arguments/{{argumentId}}/comments/{{commentId}}",
          "host": ["localhost"],
          "port": "3001",
          "path": [
            "api",
            "v1",
            "debates",
            "{{debateId}}",
            "arguments",
            "{{argumentId}}",
            "comments",
            "{{commentId}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Delete Argument",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}/arguments/{{argumentId}}/",
          "host": ["localhost"],
          "port": "3001",
          "path": [
            "api",
            "v1",
            "debates",
            "{{debateId}}",
            "arguments",
            "{{argumentId}}",
            ""
          ]
        }
      },
      "response": []
    },
    {
      "name": "Post Debate",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Define dynamic topics and categories",
              "const topics = [",
              "  \"Climate Change Debate\",",
              "  \"Future of AI\",",
              "  \"Universal Basic Income\",",
              "  \"Impact of Social Media\",",
              "  \"Ethics of Genetic Engineering\"",
              "];",
              "const categories = [",
              "  \"Politics\",",
              "  \"Technology\",",
              "  \"Sports\",",
              "  \"Health\",",
              "  \"Education\",",
              "  \"Social Issues\",",
              "];",
              "",
              "// Pick a random topic and category",
              "const randomTopic = topics[Math.floor(Math.random() * topics.length)];",
              "const randomCategory = categories[Math.floor(Math.random() * categories.length)];",
              "",
              "// Set a dynamic endTime (one week from now)",
              "const endTime = new Date();",
              "endTime.setDate(endTime.getDate() + 7); // 7 days from now",
              "const formattedEndTime = endTime.toISOString(); // ISO string format for MongoDB",
              "",
              "",
              "// Set the maximum number of participants (between 2 and 4 to match the schema limit)",
              "const maxAllowedParticipants = 4;  // Maximum allowed by the schema",
              "const maxParticipants = Math.floor(Math.random() * (maxAllowedParticipants - 1)) + 2; // Random number between 2 and 4",
              "",
              "// Set these dynamic values as Postman variables",
              "pm.variables.set(\"topic\", randomTopic);",
              "pm.variables.set(\"category\", randomCategory);",
              "// Set these dynamic values as Postman variables",
              "pm.variables.set(\"endTime\", formattedEndTime);  // Correctly set the \"endTime\" variable",
              "pm.variables.set(\"maxParticipants\", maxParticipants);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.environment.set(\"debateId\", pm.response.json()._id);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"topic\": \"{{topic}}\", \n    \"category\": \"{{category}}\", \n    \"endTime\": \"2025-12-22T15:35:57.726+00:00\", \n    \"owner\": \"{{userId}}\", \n    \"maxParticipants\": {{maxParticipants}}\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", ""]
        }
      },
      "response": []
    },
    {
      "name": "Edit Debate",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"topic\": \"Debate Topic Edited\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", "{{debateId}}"]
        }
      },
      "response": []
    },
    {
      "name": "Delete Debate",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", "{{debateId}}", ""]
        }
      },
      "response": []
    },
    {
      "name": "Post Debate",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Define dynamic topics and categories",
              "const topics = [",
              "  \"Climate Change Debate\",",
              "  \"Future of AI\",",
              "  \"Universal Basic Income\",",
              "  \"Impact of Social Media\",",
              "  \"Ethics of Genetic Engineering\"",
              "];",
              "const categories = [",
              "  \"Politics\",",
              "  \"Technology\",",
              "  \"Sports\",",
              "  \"Health\",",
              "  \"Education\",",
              "  \"Social Issues\",",
              "];",
              "",
              "// Pick a random topic and category",
              "const randomTopic = topics[Math.floor(Math.random() * topics.length)];",
              "const randomCategory = categories[Math.floor(Math.random() * categories.length)];",
              "",
              "// Set a dynamic endTime (one week from now)",
              "const endTime = new Date();",
              "endTime.setDate(endTime.getDate() + 7); // 7 days from now",
              "const formattedEndTime = endTime.toISOString(); // ISO string format for MongoDB",
              "",
              "",
              "// Set the maximum number of participants (between 2 and 4 to match the schema limit)",
              "const maxAllowedParticipants = 4;  // Maximum allowed by the schema",
              "const maxParticipants = Math.floor(Math.random() * (maxAllowedParticipants - 1)) + 2; // Random number between 2 and 4",
              "",
              "// Set these dynamic values as Postman variables",
              "pm.variables.set(\"topic\", randomTopic);",
              "pm.variables.set(\"category\", randomCategory);",
              "// Set these dynamic values as Postman variables",
              "pm.variables.set(\"endTime\", formattedEndTime);  // Correctly set the \"endTime\" variable",
              "pm.variables.set(\"maxParticipants\", maxParticipants);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.environment.set(\"debateId\", pm.response.json()._id);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"topic\": \"{{topic}}\", \n    \"category\": \"{{category}}\", \n    \"endTime\": \"2024-12-22T15:35:57.726+00:00\", \n    \"owner\": \"{{userId}}\", \n    \"maxParticipants\": {{maxParticipants}}\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", ""]
        }
      },
      "response": []
    },
    {
      "name": "Post Argument",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.variables.set(\"dynamicContent\", `Argument Content Test #${Math.floor(Math.random() * 1000)}`);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "",
              "pm.environment.set(\"argumentId\", pm.response.json()._id);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"content\": \"{{dynamicContent}}\",\n    \"userId\": \"{{userId}}\",\n    \"side\": \"against\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}/arguments/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", "{{debateId}}", "arguments", ""]
        }
      },
      "response": []
    },
    {
      "name": "Post Comment",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "let counter = 0;",
              "",
              "counter++;",
              "",
              "pm.environment.set(\"dynamicCommentContent\", `Comment #${counter}`)"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "",
              "",
              "pm.environment.set(\"commentId\", pm.response.json()._id);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"content\": \"{{dynamicCommentContent}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}/arguments/{{argumentId}}/comments/",
          "host": ["localhost"],
          "port": "3001",
          "path": [
            "api",
            "v1",
            "debates",
            "{{debateId}}",
            "arguments",
            "{{argumentId}}",
            "comments",
            ""
          ]
        }
      },
      "response": []
    },
    {
      "name": "Post Comment",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "let counter = 0;",
              "",
              "counter++;",
              "",
              "pm.environment.set(\"dynamicCommentContent\", `Comment #${counter}`)"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "",
              "",
              "pm.environment.set(\"commentId\", pm.response.json()._id);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"content\": \"{{dynamicCommentContent}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}/arguments/{{argumentId}}/comments/",
          "host": ["localhost"],
          "port": "3001",
          "path": [
            "api",
            "v1",
            "debates",
            "{{debateId}}",
            "arguments",
            "{{argumentId}}",
            "comments",
            ""
          ]
        }
      },
      "response": []
    },
    {
      "name": "Delete All Comments",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}/arguments/{{argumentId}}/comments/",
          "host": ["localhost"],
          "port": "3001",
          "path": [
            "api",
            "v1",
            "debates",
            "{{debateId}}",
            "arguments",
            "{{argumentId}}",
            "comments",
            ""
          ]
        }
      },
      "response": []
    },
    {
      "name": "Post Argument",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.variables.set(\"dynamicContent\", `Argument Content Test #${Math.floor(Math.random() * 1000)}`);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "",
              "pm.environment.set(\"argumentId\", pm.response.json()._id);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"content\": \"{{dynamicContent}}\",\n    \"userId\": \"{{userId}}\",\n    \"side\": \"against\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}/arguments/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", "{{debateId}}", "arguments", ""]
        }
      },
      "response": []
    },
    {
      "name": "Delete All Argument",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "localhost:3001/api/v1/debates/{{debateId}}/arguments/{{argumentId}}/",
          "host": ["localhost"],
          "port": "3001",
          "path": [
            "api",
            "v1",
            "debates",
            "{{debateId}}",
            "arguments",
            "{{argumentId}}",
            ""
          ]
        }
      },
      "response": []
    },
    {
      "name": "Post Debate",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Define dynamic topics and categories",
              "const topics = [",
              "  \"Climate Change Debate\",",
              "  \"Future of AI\",",
              "  \"Universal Basic Income\",",
              "  \"Impact of Social Media\",",
              "  \"Ethics of Genetic Engineering\"",
              "];",
              "const categories = [",
              "  \"Politics\",",
              "  \"Technology\",",
              "  \"Sports\",",
              "  \"Health\",",
              "  \"Education\",",
              "  \"Social Issues\",",
              "];",
              "",
              "// Pick a random topic and category",
              "const randomTopic = topics[Math.floor(Math.random() * topics.length)];",
              "const randomCategory = categories[Math.floor(Math.random() * categories.length)];",
              "",
              "// Set a dynamic endTime (one week from now)",
              "const endTime = new Date();",
              "endTime.setDate(endTime.getDate() + 7); // 7 days from now",
              "const formattedEndTime = endTime.toISOString(); // ISO string format for MongoDB",
              "",
              "",
              "// Set the maximum number of participants (between 2 and 4 to match the schema limit)",
              "const maxAllowedParticipants = 4;  // Maximum allowed by the schema",
              "const maxParticipants = Math.floor(Math.random() * (maxAllowedParticipants - 1)) + 2; // Random number between 2 and 4",
              "",
              "// Set these dynamic values as Postman variables",
              "pm.variables.set(\"topic\", randomTopic);",
              "pm.variables.set(\"category\", randomCategory);",
              "// Set these dynamic values as Postman variables",
              "pm.variables.set(\"endTime\", formattedEndTime);  // Correctly set the \"endTime\" variable",
              "pm.variables.set(\"maxParticipants\", maxParticipants);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.environment.set(\"debateId\", pm.response.json()._id);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"topic\": \"{{topic}}\", \n    \"category\": \"{{category}}\", \n    \"endTime\": \"2024-12-22T15:35:57.726+00:00\", \n    \"owner\": \"{{userId}}\", \n    \"maxParticipants\": {{maxParticipants}}\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", ""]
        }
      },
      "response": []
    },
    {
      "name": "Post Debate",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Define dynamic topics and categories",
              "const topics = [",
              "  \"Climate Change Debate\",",
              "  \"Future of AI\",",
              "  \"Universal Basic Income\",",
              "  \"Impact of Social Media\",",
              "  \"Ethics of Genetic Engineering\"",
              "];",
              "const categories = [",
              "  \"Politics\",",
              "  \"Technology\",",
              "  \"Sports\",",
              "  \"Health\",",
              "  \"Education\",",
              "  \"Social Issues\",",
              "];",
              "",
              "// Pick a random topic and category",
              "const randomTopic = topics[Math.floor(Math.random() * topics.length)];",
              "const randomCategory = categories[Math.floor(Math.random() * categories.length)];",
              "",
              "// Set a dynamic endTime (one week from now)",
              "const endTime = new Date();",
              "endTime.setDate(endTime.getDate() + 7); // 7 days from now",
              "const formattedEndTime = endTime.toISOString(); // ISO string format for MongoDB",
              "",
              "",
              "// Set the maximum number of participants (between 2 and 4 to match the schema limit)",
              "const maxAllowedParticipants = 4;  // Maximum allowed by the schema",
              "const maxParticipants = Math.floor(Math.random() * (maxAllowedParticipants - 1)) + 2; // Random number between 2 and 4",
              "",
              "// Set these dynamic values as Postman variables",
              "pm.variables.set(\"topic\", randomTopic);",
              "pm.variables.set(\"category\", randomCategory);",
              "// Set these dynamic values as Postman variables",
              "pm.variables.set(\"endTime\", formattedEndTime);  // Correctly set the \"endTime\" variable",
              "pm.variables.set(\"maxParticipants\", maxParticipants);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.environment.set(\"debateId\", pm.response.json()._id);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"topic\": \"{{topic}}\", \n    \"category\": \"{{category}}\", \n    \"endTime\": \"2024-12-22T15:35:57.726+00:00\", \n    \"owner\": \"{{userId}}\", \n    \"maxParticipants\": {{maxParticipants}}\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", ""]
        }
      },
      "response": []
    },
    {
      "name": "Unpermitted Delete All Debates",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 403\", function () {",
              "    pm.response.to.have.status(403);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "localhost:3001/api/v1/debates/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", ""]
        }
      },
      "response": []
    },
    {
      "name": "Post Debate",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Define dynamic topics and categories",
              "const topics = [",
              "  \"Climate Change Debate\",",
              "  \"Future of AI\",",
              "  \"Universal Basic Income\",",
              "  \"Impact of Social Media\",",
              "  \"Ethics of Genetic Engineering\"",
              "];",
              "const categories = [",
              "  \"Politics\",",
              "  \"Technology\",",
              "  \"Sports\",",
              "  \"Health\",",
              "  \"Education\",",
              "  \"Social Issues\",",
              "];",
              "",
              "// Pick a random topic and category",
              "const randomTopic = topics[Math.floor(Math.random() * topics.length)];",
              "const randomCategory = categories[Math.floor(Math.random() * categories.length)];",
              "",
              "// Set a dynamic endTime (one week from now)",
              "const endTime = new Date();",
              "endTime.setDate(endTime.getDate() + 7); // 7 days from now",
              "const formattedEndTime = endTime.toISOString(); // ISO string format for MongoDB",
              "",
              "",
              "// Set the maximum number of participants (between 2 and 4 to match the schema limit)",
              "const maxAllowedParticipants = 4;  // Maximum allowed by the schema",
              "const maxParticipants = Math.floor(Math.random() * (maxAllowedParticipants - 1)) + 2; // Random number between 2 and 4",
              "",
              "// Set these dynamic values as Postman variables",
              "pm.variables.set(\"topic\", randomTopic);",
              "pm.variables.set(\"category\", randomCategory);",
              "// Set these dynamic values as Postman variables",
              "pm.variables.set(\"endTime\", formattedEndTime);  // Correctly set the \"endTime\" variable",
              "pm.variables.set(\"maxParticipants\", maxParticipants);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.environment.set(\"debateId\", pm.response.json()._id);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"topic\": \"{{topic}}\", \n    \"category\": \"{{category}}\", \n    \"endTime\": \"2024-12-22T15:35:57.726+00:00\", \n    \"owner\": \"{{userId}}\", \n    \"maxParticipants\": {{maxParticipants}}\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", ""]
        }
      },
      "response": []
    },
    {
      "name": "Delete Specific Debate of a User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/user/{{userId}}/{{debateId}}",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", "user", "{{userId}}", "{{debateId}}"]
        }
      },
      "response": []
    },
    {
      "name": "Post Debate",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Define dynamic topics and categories",
              "const topics = [",
              "  \"Climate Change Debate\",",
              "  \"Future of AI\",",
              "  \"Universal Basic Income\",",
              "  \"Impact of Social Media\",",
              "  \"Ethics of Genetic Engineering\"",
              "];",
              "const categories = [",
              "  \"Politics\",",
              "  \"Technology\",",
              "  \"Sports\",",
              "  \"Health\",",
              "  \"Education\",",
              "  \"Social Issues\",",
              "];",
              "",
              "// Pick a random topic and category",
              "const randomTopic = topics[Math.floor(Math.random() * topics.length)];",
              "const randomCategory = categories[Math.floor(Math.random() * categories.length)];",
              "",
              "// Set a dynamic endTime (one week from now)",
              "const endTime = new Date();",
              "endTime.setDate(endTime.getDate() + 7); // 7 days from now",
              "const formattedEndTime = endTime.toISOString(); // ISO string format for MongoDB",
              "",
              "",
              "// Set the maximum number of participants (between 2 and 4 to match the schema limit)",
              "const maxAllowedParticipants = 4;  // Maximum allowed by the schema",
              "const maxParticipants = Math.floor(Math.random() * (maxAllowedParticipants - 1)) + 2; // Random number between 2 and 4",
              "",
              "// Set these dynamic values as Postman variables",
              "pm.variables.set(\"topic\", randomTopic);",
              "pm.variables.set(\"category\", randomCategory);",
              "// Set these dynamic values as Postman variables",
              "pm.variables.set(\"endTime\", formattedEndTime);  // Correctly set the \"endTime\" variable",
              "pm.variables.set(\"maxParticipants\", maxParticipants);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.environment.set(\"debateId\", pm.response.json()._id);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"topic\": \"{{topic}}\", \n    \"category\": \"{{category}}\", \n    \"endTime\": \"2024-12-22T15:35:57.726+00:00\", \n    \"owner\": \"{{userId}}\", \n    \"maxParticipants\": 2\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", ""]
        }
      },
      "response": []
    },
    {
      "name": "Post Debate",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Define dynamic topics and categories",
              "const topics = [",
              "  \"Climate Change Debate\",",
              "  \"Future of AI\",",
              "  \"Universal Basic Income\",",
              "  \"Impact of Social Media\",",
              "  \"Ethics of Genetic Engineering\"",
              "];",
              "const categories = [",
              "  \"Politics\",",
              "  \"Technology\",",
              "  \"Sports\",",
              "  \"Health\",",
              "  \"Education\",",
              "  \"Social Issues\",",
              "];",
              "",
              "// Pick a random topic and category",
              "const randomTopic = topics[Math.floor(Math.random() * topics.length)];",
              "const randomCategory = categories[Math.floor(Math.random() * categories.length)];",
              "",
              "// Set a dynamic endTime (one week from now)",
              "const endTime = new Date();",
              "endTime.setDate(endTime.getDate() + 7); // 7 days from now",
              "const formattedEndTime = endTime.toISOString(); // ISO string format for MongoDB",
              "",
              "",
              "// Set the maximum number of participants (between 2 and 4 to match the schema limit)",
              "const maxAllowedParticipants = 4;  // Maximum allowed by the schema",
              "const maxParticipants = Math.floor(Math.random() * (maxAllowedParticipants - 1)) + 2; // Random number between 2 and 4",
              "",
              "// Set these dynamic values as Postman variables",
              "pm.variables.set(\"topic\", randomTopic);",
              "pm.variables.set(\"category\", randomCategory);",
              "// Set these dynamic values as Postman variables",
              "pm.variables.set(\"endTime\", formattedEndTime);  // Correctly set the \"endTime\" variable",
              "pm.variables.set(\"maxParticipants\", maxParticipants);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.environment.set(\"debateId\", pm.response.json()._id);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"topic\": \"{{topic}}\", \n    \"category\": \"{{category}}\", \n    \"endTime\": \"2025-10-22T15:35:57.726+00:00\", \n    \"owner\": \"{{userId}}\", \n    \"maxParticipants\": 2\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", ""]
        }
      },
      "response": []
    },
    {
      "name": "Post Debate",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Define dynamic topics and categories",
              "const topics = [",
              "  \"Climate Change Debate\",",
              "  \"Future of AI\",",
              "  \"Universal Basic Income\",",
              "  \"Impact of Social Media\",",
              "  \"Ethics of Genetic Engineering\"",
              "];",
              "const categories = [",
              "  \"Politics\",",
              "  \"Technology\",",
              "  \"Sports\",",
              "  \"Health\",",
              "  \"Education\",",
              "  \"Social Issues\",",
              "];",
              "",
              "// Pick a random topic and category",
              "const randomTopic = topics[Math.floor(Math.random() * topics.length)];",
              "const randomCategory = categories[Math.floor(Math.random() * categories.length)];",
              "",
              "// Set a dynamic endTime (one week from now)",
              "const endTime = new Date();",
              "endTime.setDate(endTime.getDate() + 7); // 7 days from now",
              "const formattedEndTime = endTime.toISOString(); // ISO string format for MongoDB",
              "",
              "",
              "// Set the maximum number of participants (between 2 and 4 to match the schema limit)",
              "const maxAllowedParticipants = 4;  // Maximum allowed by the schema",
              "const maxParticipants = Math.floor(Math.random() * (maxAllowedParticipants - 1)) + 2; // Random number between 2 and 4",
              "",
              "// Set these dynamic values as Postman variables",
              "pm.variables.set(\"topic\", randomTopic);",
              "pm.variables.set(\"category\", randomCategory);",
              "// Set these dynamic values as Postman variables",
              "pm.variables.set(\"endTime\", formattedEndTime);  // Correctly set the \"endTime\" variable",
              "pm.variables.set(\"maxParticipants\", maxParticipants);",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.environment.set(\"debateId\", pm.response.json()._id);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"topic\": \"{{topic}}\", \n    \"category\": \"{{category}}\", \n    \"endTime\": \"2026-01-22T15:35:57.726+00:00\", \n    \"owner\": \"{{userId}}\", \n    \"maxParticipants\": 2\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", ""]
        }
      },
      "response": []
    },
    {
      "name": "Get Open Debates Sorted in Endtime",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "localhost:3001/api/v1/debates?status=open&sort=desc",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates"],
          "query": [
            {
              "key": "status",
              "value": "open"
            },
            {
              "key": "sort",
              "value": "desc"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Delete All Debates of a User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/debates/user/{{userId}}",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "debates", "user", "{{userId}}"]
        }
      },
      "response": []
    },
    {
      "name": "Log User Out",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "        pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "url": {
          "raw": "localhost:3001/api/v1/auth/logout",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "auth", "logout"]
        }
      },
      "response": []
    },
    {
      "name": "Signup as User",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.variables.set(\"dynamicEmail\", `test${Math.floor(Math.random() * 1000)}@gmail.com`);",
              "pm.variables.set(\"dynamicUsername\", `testUser${Math.floor(Math.random() * 1000)}`);",
              "pm.variables.set(\"dynamicFirstName\", \"TestFirstName\");",
              "pm.variables.set(\"dynamicLastName\", \"TestLastName\");",
              "pm.variables.set(\"dynamicPassword\", \"testPassword123\");",
              "",
              "pm.variables.set(\"dynamicEmail\", `test${Math.floor(Math.random() * 1000)}@gmail.com`);",
              "pm.variables.set(\"dynamicUsername\", `testUser${Math.floor(Math.random() * 1000)}`);",
              "pm.variables.set(\"dynamicFirstName\", \"TestFirstName\");",
              "pm.variables.set(\"dynamicLastName\", \"TestLastName\");",
              "pm.variables.set(\"dynamicPassword\", \"testPassword123\");",
              "",
              "const roles = [\"user\", \"admin\"];",
              "pm.variables.set(\"dynamicRole\", roles[0]);",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful POST request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
              "});",
              "",
              "pm.environment.set(\"userId\", pm.response.json().user._id); // Set ownerId from the response",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"emailAddress\": \"{{dynamicEmail}}\",\n    \"username\": \"{{dynamicUsername}}\",\n    \"password\": \"{{dynamicPassword}}\",\n    \"firstName\": \"{{dynamicFirstName}}\",\n    \"lastName\": \"{{dynamicLastName}}\",\n    \"role\": \"{{dynamicRole}}\"\n}\n",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/auth/signup",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "auth", "signup"]
        }
      },
      "response": []
    },
    {
      "name": "Signup as User",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.variables.set(\"dynamicEmail\", `test${Math.floor(Math.random() * 1000)}@gmail.com`);",
              "pm.variables.set(\"dynamicUsername\", `testUser${Math.floor(Math.random() * 1000)}`);",
              "pm.variables.set(\"dynamicFirstName\", \"TestFirstName\");",
              "pm.variables.set(\"dynamicLastName\", \"TestLastName\");",
              "pm.variables.set(\"dynamicPassword\", \"testPassword123\");",
              "",
              "pm.variables.set(\"dynamicEmail\", `test${Math.floor(Math.random() * 1000)}@gmail.com`);",
              "pm.variables.set(\"dynamicUsername\", `testUser${Math.floor(Math.random() * 1000)}`);",
              "pm.variables.set(\"dynamicFirstName\", \"TestFirstName\");",
              "pm.variables.set(\"dynamicLastName\", \"TestLastName\");",
              "pm.variables.set(\"dynamicPassword\", \"testPassword123\");",
              "",
              "const roles = [\"user\", \"admin\"];",
              "pm.variables.set(\"dynamicRole\", roles[0]);",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful POST request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
              "});",
              "",
              "pm.environment.set(\"userId\", pm.response.json().user._id); // Set ownerId from the response",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"emailAddress\": \"{{dynamicEmail}}\",\n    \"username\": \"{{dynamicUsername}}\",\n    \"password\": \"{{dynamicPassword}}\",\n    \"firstName\": \"{{dynamicFirstName}}\",\n    \"lastName\": \"{{dynamicLastName}}\",\n    \"role\": \"{{dynamicRole}}\"\n}\n",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/auth/signup",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "auth", "signup"]
        }
      },
      "response": []
    },
    {
      "name": "Signup as Admin",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.variables.set(\"adminEmail\", `admin${Math.floor(Math.random() * 1000)}@gmail.com`);",
              "pm.variables.set(\"adminUsername\", `adminUser${Math.floor(Math.random() * 1000)}`);",
              "pm.variables.set(\"adminFirstName\", \"adminFirstName\");",
              "pm.variables.set(\"adminLastName\", \"adminLastName\");",
              "pm.variables.set(\"adminPassword\", \"adminPassword123\");",
              "",
              "const roles = [\"user\", \"admin\"];",
              "pm.variables.set(\"adminRole\", roles[1]);",
              "",
              "pm.variables.set(\"invitationCode\", \"invitationCode\")",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful POST request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
              "});",
              "",
              "pm.environment.set(\"userId\", pm.response.json().user._id); // Set ownerId from the response",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"emailAddress\": \"{{adminEmail}}\",\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"firstName\": \"{{adminFirstName}}\",\n    \"lastName\": \"{{adminLastName}}\",\n    \"role\": \"{{adminRole}}\",\n    \"invitationCode\": \"{{invitationCode}}\"\n}\n",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/auth/signup",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "auth", "signup"]
        }
      },
      "response": []
    },
    {
      "name": "Login as Admin",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful POST request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
              "});",
              "",
              "// Set the token in the environment",
              "const token = pm.response.json().token; // Access token from the response",
              "if (token) {",
              "    pm.environment.set(\"token\", token); // Store it in environment",
              "} else {",
              "    console.error(\"Token not found in the response\");",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"emailAddress\": \"{{adminEmail}}\",\n    \"password\": \"{{adminPassword}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/auth/login",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "auth", "login"]
        }
      },
      "response": []
    },
    {
      "name": "Delete All Users",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "localhost:3001/api/v1/users/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "users", ""]
        }
      },
      "response": []
    },
    {
      "name": "Signup as User",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.variables.set(\"dynamicEmail\", `test${Math.floor(Math.random() * 1000)}@gmail.com`);",
              "pm.variables.set(\"dynamicUsername\", `testUser${Math.floor(Math.random() * 1000)}`);",
              "pm.variables.set(\"dynamicFirstName\", \"TestFirstName\");",
              "pm.variables.set(\"dynamicLastName\", \"TestLastName\");",
              "pm.variables.set(\"dynamicPassword\", \"testPassword123\");",
              "",
              "pm.variables.set(\"dynamicEmail\", `test${Math.floor(Math.random() * 1000)}@gmail.com`);",
              "pm.variables.set(\"dynamicUsername\", `testUser${Math.floor(Math.random() * 1000)}`);",
              "pm.variables.set(\"dynamicFirstName\", \"TestFirstName\");",
              "pm.variables.set(\"dynamicLastName\", \"TestLastName\");",
              "pm.variables.set(\"dynamicPassword\", \"testPassword123\");",
              "",
              "const roles = [\"user\", \"admin\"];",
              "pm.variables.set(\"dynamicRole\", roles[0]);",
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful POST request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
              "});",
              "",
              "pm.environment.set(\"userId\", pm.response.json().user._id); // Set ownerId from the response",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"emailAddress\": \"{{dynamicEmail}}\",\n    \"username\": \"{{dynamicUsername}}\",\n    \"password\": \"{{dynamicPassword}}\",\n    \"firstName\": \"{{dynamicFirstName}}\",\n    \"lastName\": \"{{dynamicLastName}}\",\n    \"role\": \"{{dynamicRole}}\"\n}\n",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/auth/signup",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "auth", "signup"]
        }
      },
      "response": []
    },
    {
      "name": "Login as User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful POST request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
              "});",
              "",
              "// Set the token in the environment",
              "const token = pm.response.json().token; // Access token from the response",
              "if (token) {",
              "    pm.environment.set(\"token\", token); // Store it in environment",
              "} else {",
              "    console.error(\"Token not found in the response\");",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"emailAddress\": \"{{dynamicEmail}}\",\n    \"password\": \"{{dynamicPassword}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/auth/login",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "auth", "login"]
        }
      },
      "response": []
    },
    {
      "name": "Patch User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful PATCH request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"firstName\": \"Andre\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "localhost:3001/api/v1/users/{{userId}}/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "users", "{{userId}}", ""]
        }
      },
      "response": []
    },
    {
      "name": "Get PATCHed User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful GET request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "localhost:3001/api/v1/users/{{userId}}/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "users", "{{userId}}", ""]
        }
      },
      "response": []
    },
    {
      "name": "Delete Account",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{token}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "localhost:3001/api/v1/users/{{userId}}/",
          "host": ["localhost"],
          "port": "3001",
          "path": ["api", "v1", "users", "{{userId}}", ""]
        }
      },
      "response": []
    }
  ]
}
